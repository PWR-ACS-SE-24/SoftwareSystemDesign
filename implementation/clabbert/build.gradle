plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id("com.diffplug.spotless") version "7.0.0.BETA4"
}

group = 'pwr.jakprzyjade'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    integration {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output

        java {
            srcDirs 'src/integration/java'
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationImplementation.extendsFrom implementation
    integrationRuntimeOnly.extendsFrom runtimeOnly
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    implementation 'com.fasterxml.uuid:java-uuid-generator:5.1.0'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    integrationImplementation 'org.springframework.boot:spring-boot-starter-test'
    integrationImplementation 'org.testcontainers:postgresql:1.19.8'
    integrationRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()

    testLogging {
        events "passed"
    }
}

check.dependsOn integrationTest

bootJar {
    doFirst {
        manifest {
            attributes(
                    'Implementation-Version': "${version}"
            )
        }
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '.gitattributes', '.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    java {
        googleJavaFormat('1.21.0').aosp().reflowLongStrings().skipJavadocFormatting()
        formatAnnotations()

        licenseHeader '/* @jakubzehner (C) $YEAR */'

        if (project.hasProperty('projSpotlessTarget')) {
            target project.projSpotlessTarget
        } else {
            target 'src/*/java/**/*.java'
        }
    }
}
