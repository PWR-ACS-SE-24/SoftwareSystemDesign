import { uuid } from "@jobberknoll/core/shared";
import { assert, assertEquals, assertRejects } from "@std/assert";
import { FakeTime } from "@std/testing/time";
import { createLocalJWKSet, decodeJwt, jwtVerify } from "jose";
import { JwtHandler } from "./jwt.ts";

Deno.test("createAccessToken should embed account ID into the payload", async () => {
  const jwtHandler = await JwtHandler.setupMockForTesting("ES384");
  const accountId = uuid();

  const accessToken = await jwtHandler.createAccessToken({ id: accountId, type: "passenger" });

  const payload = decodeJwt(accessToken);
  assertEquals(payload.sub, accountId);
});

Deno.test("createAccessToken should embed account type into the payload", async () => {
  const jwtHandler = await JwtHandler.setupMockForTesting("ES384");
  const accountId = uuid();
  const type = "passenger";

  const accessToken = await jwtHandler.createAccessToken({ id: accountId, type });

  const payload = decodeJwt(accessToken);
  assertEquals(payload["jakprzyjade:account:type"], type);
});

Deno.test("createRefreshToken should embed account ID into the payload", async () => {
  const jwtHandler = await JwtHandler.setupMockForTesting("ES384");
  const accountId = uuid();

  const refreshToken = await jwtHandler.createRefreshToken(accountId);

  const payload = decodeJwt(refreshToken);
  assertEquals(payload.sub, accountId);
});

Deno.test("verifyRefreshToken should accept tokens in the happy path", async () => {
  const jwtHandler = await JwtHandler.setupMockForTesting("ES384");
  const accountId = uuid();
  const refreshToken = await jwtHandler.createRefreshToken(accountId);

  const isValid = await jwtHandler.verifyRefreshToken(refreshToken, accountId);

  assert(isValid);
});

Deno.test("verifyRefreshToken should reject tokens generated by createAccessToken", async () => {
  const jwtHandler = await JwtHandler.setupMockForTesting("ES384");
  const accountId = uuid();
  const accessToken = await jwtHandler.createAccessToken({ id: accountId, type: "passenger" });

  const isValid = await jwtHandler.verifyRefreshToken(accessToken, accountId);

  assert(!isValid);
});

Deno.test("verifyRefreshToken should reject tokens created for other accounts", async () => {
  const jwtHandler = await JwtHandler.setupMockForTesting("ES384");
  const refreshToken = await jwtHandler.createRefreshToken(uuid());

  const isValid = await jwtHandler.verifyRefreshToken(refreshToken, uuid());

  assert(!isValid);
});

Deno.test.ignore("verifyRefreshToken should reject expired tokens", async () => {
  using fakeTime = new FakeTime();
  const jwtHandler = await JwtHandler.setupMockForTesting("ES384");
  const accountId = uuid();
  const refreshToken = await jwtHandler.createRefreshToken(accountId);

  await fakeTime.tickAsync(8 * 24 * 60 * 60 * 1000); // 8 days
  const isValid = await jwtHandler.verifyRefreshToken(refreshToken, accountId);

  assert(!isValid);
});

Deno.test("exportJWKS should export a key for veryfing access tokens", async () => {
  const jwtHandler = await JwtHandler.setupMockForTesting("ES384");
  const accountId = uuid();
  const accessToken = await jwtHandler.createAccessToken({ id: accountId, type: "passenger" });

  const jwks = createLocalJWKSet(await jwtHandler.exportJWKS());

  await jwtVerify(accessToken, jwks);
});

Deno.test("exportJWKS should export a key for veryfing refresh tokens", async () => {
  const jwtHandler = await JwtHandler.setupMockForTesting("ES384");
  const accountId = uuid();
  const refreshToken = await jwtHandler.createRefreshToken(accountId);

  const jwks = createLocalJWKSet(await jwtHandler.exportJWKS());

  await jwtVerify(refreshToken, jwks);
});

Deno.test("exportJWKS should export keys sensitive to kid changes", async () => {
  const jwtHandler = await JwtHandler.setupMockForTesting("ES384");
  const accountId = uuid();
  const accessToken = await jwtHandler.createAccessToken({ id: accountId, type: "passenger" });

  const exported = await jwtHandler.exportJWKS();
  exported.keys.forEach((k) => k.kid = "invalid");
  const jwks = createLocalJWKSet(exported);

  assertRejects(() => jwtVerify(accessToken, jwks));
});
